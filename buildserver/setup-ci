#!/bin/bash
#
# Prepares a CI environment for apps.
#
# Notes:
#
# - On CI environments that do not set CI_PROJECT_DIR, this script must be run from the equivalent dir, i.e.
#   the path where the source code of the CI project resides.
# - This script does not set up a keystore, therefore `fdroid publish` will not work. If this is required, a
#   keystore must be set up separately.

# CI_PROJECT_DIR is set only on GitLab CI; use $PWD for others
# TODO If other CI environments have equivalent env vars, this could be improved to use those, falling back
# to $PWD only as a last resort.
test -n "$CI_PROJECT_DIR" || export CI_PROJECT_DIR=$PWD
pushd $CI_PROJECT_DIR

test -d build || mkdir build

apt-get update
apt-get dist-upgrade
apt-get clean

test -n "$fdroidserver" || source /etc/profile.d/bsenv.sh

rm -rf "$ANDROID_HOME/tools" # TODO remove once sdkmanager can upgrade installed packages
# These packages are needed to make this env like the production buildserver.
sdkmanager "tools" "platform-tools" "build-tools;31.0.0"

# Install fdroidserver from source
rm -rf $fdroidserver
mkdir $fdroidserver
git ls-remote https://gitlab.com/fdroid/fdroidserver.git master
curl --silent https://gitlab.com/fdroid/fdroidserver/-/archive/master/fdroidserver-master.tar.gz | tar -xz --directory=$fdroidserver --strip-components=1
export PATH="$fdroidserver:$PATH"
export PYTHONPATH="$fdroidserver:$fdroidserver/examples"
export PYTHONUNBUFFERED=true

ln -s $home_vagrant/build $CI_PROJECT_DIR/build

# Make sure .gradle stores inside $CI_PROJECT_DIR (needed to make it cacheable on some CI environments)
# (force link creation to ensure this operation completes even if there is cached data left behind by
# previous CI setups)
ln -fsv $home_vagrant/.gradle $CI_PROJECT_DIR/.gradle

for d in logs tmp unsigned $home_vagrant/build $home_vagrant/.android $home_vagrant/.gradle $ANDROID_HOME; do
    test -d $d || mkdir $d;
    chown -R vagrant $d;
done

export GRADLE_USER_HOME=$home_vagrant/.gradle
export fdroid="sudo --preserve-env --user vagrant
  env PATH=$fdroidserver:$PATH
  env PYTHONPATH=$fdroidserver:$fdroidserver/examples
  env PYTHONUNBUFFERED=true
  env TERM=$TERM
  env HOME=$home_vagrant
  fdroid"

# Modify permissions so `fdroid build` (running as user vagrant) has access to everything it needs.
# Since we are accessing another userâ€™s home dir, we change the group (not the owner) and set permissions as
# needed.
# - git needs read/execute on all parents of the source code dir.
# - fdroid creates subdirs, so the source code dir must be writable.
# - The build subdir already exists, therefore change ownership
chgrp -R vagrant $CI_PROJECT_DIR
chmod -R g+r $CI_PROJECT_DIR
chmod g+w $CI_PROJECT_DIR
# paranoia: first remove permissions, then change group, then add permissions
chmod g-w ..
chgrp vagrant ..
chmod g+rx ..
chown -R vagrant $CI_PROJECT_DIR/build;

chown -R vagrant $home_vagrant

popd
