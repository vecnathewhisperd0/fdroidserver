#!/usr/bin/env python3

import logging
import optparse
import os
import sys
import unittest
import tempfile
import textwrap
from unittest import mock
from pathlib import Path


from testcommon import TmpCwd

localmodule = Path(__file__).resolve().parent.parent
print('localmodule: ' + str(localmodule))
if localmodule not in sys.path:
    sys.path.insert(0, str(localmodule))

from fdroidserver import common
from fdroidserver import rewritemeta
from fdroidserver.exception import FDroidException


class RewriteMetaTest(unittest.TestCase):
    '''fdroidserver/publish.py'''

    def setUp(self):
        logging.basicConfig(level=logging.DEBUG)
        self.basedir = localmodule / 'tests'
        self.tmpdir = localmodule / '.testfiles'
        self.tmpdir.mkdir(exist_ok=True)
        # TODO: Python3.6: Accepts a path-like object.
        os.chdir(str(self.basedir))

    def test_rewrite_scenario_trivial(self):

        sys.argv = ['rewritemeta', 'a', 'b']

        with tempfile.TemporaryDirectory() as tmpdir, TmpCwd(tmpdir):
            Path('metadata').mkdir()
            with Path('metadata/a.yml').open('w') as f:
                f.write('AutoName: a')
            with Path('metadata/b.yml').open('w') as f:
                f.write('AutoName: b')

            rewritemeta.main()

            self.assertEqual(
                Path('metadata/a.yml').read_text(encoding='utf-8'),
                textwrap.dedent(
                    '''\
                    License: Unknown

                    AutoName: a

                    AutoUpdateMode: None
                    UpdateCheckMode: None
                    '''
                ),
            )

            self.assertEqual(
                Path('metadata/b.yml').read_text(encoding='utf-8'),
                textwrap.dedent(
                    '''\
                    License: Unknown

                    AutoName: b

                    AutoUpdateMode: None
                    UpdateCheckMode: None
                    '''
                ),
            )

    def test_rewrite_scenario_yml_no_ruamel(self):
        sys.argv = ['rewritemeta', 'a']
        with tempfile.TemporaryDirectory() as tmpdir, TmpCwd(tmpdir):
            Path('metadata').mkdir()
            with Path('metadata/a.yml').open('w') as f:
                f.write('AutoName: a')

            def boom(*args):
                raise FDroidException(' '.join((str(x) for x in args)))

            with mock.patch('importlib.util.find_spec', boom):
                with self.assertRaises(FDroidException):
                    rewritemeta.main()

            self.assertEqual(
                Path('metadata/a.yml').read_text(encoding='utf-8'), 'AutoName: a'
            )


if __name__ == "__main__":
    parser = optparse.OptionParser()
    parser.add_option(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="Spew out even more information than normal",
    )
    (common.options, args) = parser.parse_args(['--verbose'])

    newSuite = unittest.TestSuite()
    newSuite.addTest(unittest.makeSuite(RewriteMetaTest))
    unittest.main(failfast=False)
